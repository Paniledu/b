import cv2
import numpy as np
import matplotlib.pyplot as plt
img_bgr = cv2.imread(r"C:back5.jpg")
img = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)
inv = 255 - img
c = 255 / np.log(1 + np.max(img))
log = c * (np.log(1 + img))
log = np.array(log, dtype=np.uint8)
gamma = 0.1
img_gamma = np.array(255 * (img / 255) ** gamma, dtype=np.uint8)
lo, hi = 50, 250
contrast = np.zeros_like(img)
contrast[(img >= lo) & (img <= hi)] = 255
def bit_plane_slice(im, b):
    return ((im >> b) & 1) * 255
bit_planes = []
gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
for i in range(8):
    bit = bit_plane_slice(gray, i)
    bit_planes.append(bit)
plt.figure(figsize=(15, 10))
plt.subplot(3, 4, 1)
plt.imshow(img)
plt.title("Original")
plt.axis('off')
plt.subplot(3, 4, 2)
plt.imshow(inv)
plt.title("Inversion")
plt.axis('off')
plt.subplot(3, 4, 3)
plt.imshow(log)
plt.title("Log Transform")
plt.axis('off')
plt.subplot(3, 4, 4)
plt.imshow(img_gamma)
plt.title("Gamma Correction")
plt.axis('off')
plt.subplot(3, 4, 5)
plt.imshow(contrast)
plt.title("Contrast Stretching")
plt.axis('off')
for i in range(8):
    plt.subplot(3, 4, i + 6)
    plt.imshow(bit_planes[i], cmap='gray')
    plt.title(f"Bit Plane {i}")
    plt.axis('off')
plt.tight_layout()
plt.show()
